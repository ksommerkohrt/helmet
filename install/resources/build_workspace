#!/bin/bash
set -e

release="main"

LOGO=('\n\n                            \e[0m\e[38;5;252m              ▄▄▄▄▄▄▄▄'
'\e[2;34m         ▄▄▄▄▄ \e[2;33m▄▄▄▄▄\e[0m\e[38;5;252m                    ▀▀▀▀▀▀▀▀▀'
'\e[2;34m     ▄███████▀\e[2;33m▄██████▄\e[0m\e[38;5;252m   ▀█████████████████████▀'
'\e[2;34m  ▄██████████ \e[2;33m████████\e[31m ▄\e[0m\e[38;5;249m   ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄'
'\e[2;34m ███████████▀ \e[2;33m███████▀\e[31m ██\e[0m\e[38;5;249m   ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀'
'\e[2;34m█████████▀   \e[2;33m▀▀▀▀▀▀▀▀\e[31m ████\e[0m\e[38;5;246m   ▀███████████▀'
'\e[2;34m▀█████▀ \e[2;32m▄▄███████████▄\e[31m ████\e[0m\e[38;5;243m   ▄▄▄▄▄▄▄▄▄'
'\e[2;34m  ▀▀▀ \e[2;32m███████████████▀\e[31m ████\e[0m\e[38;5;243m   ▀▀▀▀▀▀▀▀'
'       \e[2;32m▀▀█████▀▀▀▀▀▀\e[31m  ▀▀▀▀\e[0m\e[38;5;240m   ▄█████▀'
'              \e[2;90m ████████▀    ▄▄▄'
'              \e[2;90m ▀███▀       ▀▀▀'
'              \e[2;90m  ▀▀      \e[0m'
'╔═══╗╔═══╗╔═══╗╔═╗ ╔╗╔══╗╔═══╗╔══╗╔╗   ╔═══╗╔════╗'
'║╔═╗║║╔═╗║║╔═╗║║║║ ║║╚╣╠╝║╔═╗║╚╣╠╝║║   ║╔═╗║║╔╗╔╗║'
'║║ ╚╝║║ ║║║║ ╚╝║║╚╗║║ ║║ ║║ ║║ ║║ ║║   ║║ ║║╚╝║║╚╝'
'║║   ║║ ║║║║╔═╗║╔╗╚╝║ ║║ ║╚═╝║ ║║ ║║   ║║ ║║  ║║  '
'║║ ╔╗║║ ║║║║╚╗║║║╚╗║║ ║║ ║╔══╝ ║║ ║║ ╔╗║║ ║║  ║║  '
'║╚═╝║║╚═╝║║╚═╝║║║ ║║║╔╣╠╗║║   ╔╣╠╗║╚═╝║║╚═╝║ ╔╝╚╗ '
'╚═══╝╚═══╝╚═══╝╚╝ ╚═╝╚══╝╚╝   ╚══╝╚═══╝╚═══╝ ╚══╝ '
'\e[5m\e[31m                    _____         '
'_______ ___ ______ ____(_)_______ '
'__  __ `__ \_  __ `/__  / __  __ \'
'_  / / / / // /_/ / _  /  _  / / /'
'/_/ /_/ /_/ \__,_/  /_/   /_/ /_/ \e[0m\n'
)

for line in "${LOGO[@]}"; do
    echo -e "$line"
done

echo -e "\n\e[2;32mWelcome to the CogniPilot $release workspace builder - Ctrl-c at any time to exit.\e[0m\n"

while :; do
  read -p $'\n\e[2;33mClone repositories with git using already setup github ssh keys [y/n]?\e[0m ' sshgit
  if [[ ${sshgit,,} == "y" ]]; then
    sshgit="y"
    echo -e "\e[2;32mUsing git with ssh, best for developers.\e[0m"
    break
  elif [[ ${sshgit,,} == "n" ]]; then
    sshgit="n"
    echo -e "\e[2;32mUsing git with https, read only.\e[0m"
    break
  else
    echo -e "\e[31mInvalid input please try again.\e[0m"
  fi
done

PS3=$'\n\e[2;33mEnter a platform (number) to build: \e[0m'
select opt in b3rb elm4 rdd2; do
  case $opt in
  b3rb)
    robot=b3rb
    echo -e "\e[2;32mBuilding platform b3rb.\n\e[0m"
    break;;
  elm4)
    robot=elm4
    echo -e "\e[2;32mBuilding platform elm4.\n\e[0m"
    break;;
  rdd2)
    robot=rdd2
    echo -e "\e[2;32mBuilding platform rdd2.\n\e[0m"
    break;;
  *)
    echo -e "\e[31mInvalid option $REPLY\n\e[0m";;
  esac
done

if [[ ${sshgit} == "y" ]]; then
  echo -e "\e[2;34mBUILD:\e[0m\e[2;32m Checking helmet version, updating if needed.\e[0m"
  if [ ! -f ~/cognipilot/helmet/.git/HEAD ]; then
    git clone -b $release git@github.com:Cognipilot/helmet.git
  elif ! grep -qF "$release" ~/cognipilot/helmet/.git/HEAD; then
    cd ~/cognipilot/helmet
    git checkout $release
    git pull
    cd ~/cognipilot
  else
    cd ~/cognipilot/helmet
    git pull
    cd ~/cognipilot
  fi
  echo -e "\e[2;34mBUILD:\e[0m\e[2;32m Importing helmet/dream/base.yaml\e[0m"
  vcs import < helmet/dream/base.yaml
  echo -e "\e[2;34mBUILD:\e[0m\e[2;32m Importing helmet/dream/$robot.yaml\e[0m"
  vcs import < helmet/dream/$robot.yaml
elif [[ ${sshgit} == "n" ]]; then
  echo -e "\e[2;34mBUILD:\e[0m\e[2;32m Checking read only helmet version, updating if needed.\e[0m"
  if [ ! -f ~/cognipilot/helmet/.git/HEAD ]; then
    git clone -b $release https://github.com/Cognipilot/helmet.git
  elif ! grep -qF "$release" ~/cognipilot/helmet/.git/HEAD; then
    cd ~/cognipilot/helmet
    git checkout $release
    git pull
    cd ~/cognipilot
  else
    cd ~/cognipilot/helmet
    git pull
    cd ~/cognipilot
  fi
  echo -e "\e[2;34mBUILD:\e[0m\e[2;32m Importing helmet/read_only/dream/base.yaml\e[0m"
  vcs import < helmet/read_only/dream/base.yaml
  echo -e "\e[2;34mBUILD:\e[0m\e[2;32m Importing helmet/read_only/dream/$robot.yaml\e[0m"
  vcs import < helmet/read_only/dream/$robot.yaml
fi

cd ~/cognipilot/cranium
echo -e "\e[2;34mBUILD:\e[0m\e[2;32m Updating all existing packages in cranium\e[0m"
vcs pull
echo -e "\e[2;34mBUILD:\e[0m\e[2;32m Running colcon to build cranium ROS packages\e[0m"
colcon build --symlink-install
cd ~/cognipilot

cd ~/cognipilot/ws/cerebri
echo -e "\e[2;34mBUILD:\e[0m\e[2;32m Updating Cerebri and checking west workspace\e[0m"
vcs pull
if [ ! -d ~/cognipilot/ws/.west ] ; then
  echo -e "\e[2;34mBUILD:\e[0m\e[2;32m Initializing west workspace\e[0m"
  west init -l .
fi
echo -e "\e[2;34mBUILD:\e[0m\e[2;32m Updating west workspace\e[0m"
west update
echo -e "\e[2;34mBUILD:\e[0m\e[2;32m Building SIL cerebri image for $robot\e[0m"
west build app/$robot/ -b native_sim -t install -p
cd ~/cognipilot

cd ~/cognipilot/electrode
echo -e "\e[2;34mBUILD:\e[0m\e[2;32m Updating all existing packages in electrode\e[0m"
vcs pull
echo -e "\e[2;34mBUILD:\e[0m\e[2;32m Running colcon to build electrode ROS packages\e[0m"
colcon build --symlink-install
cd ~/cognipilot

echo -e "\e[2;32mCogniPilot workspace builder has finished!\nPlease source your .bashrc:\e[0m\e[31m\n\tsource ~/.bashrc\e[0m"
